#include "SchoolBus.h"

using namespace std;

SchoolBus::SchoolBus(){};

SchoolBus::SchoolBus(const Graph<int> &graph){
	this->routesGraph = graph;
	this->routesGraph.floydWarshallShortestPath();
}

void SchoolBus::addBus(const Bus &bus){
	this->bus.push_back(bus);
}

vector <Bus> SchoolBus::getBus() const{
	return bus;
}

void SchoolBus::addSchool(School * school){
	this->schools.push_back(school);
}

vector <School *> SchoolBus::getSchools() const{
	return schools;
}

Graph <int> SchoolBus::getRoutesGraph() const{
	return routesGraph;
}

// TODO - ADAPTAR CODIGO PARA O QUE FOR NECESSÁRIO - MÉTODO MOSTRA TODO O GRAFO E A ROTA ENTRE 2 PONTOS COM
// COR A VERDE
void SchoolBus::showGraph(int srcNode, int destNode){
	unsigned int width = 800;
	unsigned int height = 600;

	routesGraph.dijkstraShortestPath(srcNode);
	gv = new GraphViewer(width, height, true);
	gv->createWindow(width, height);
	gv->defineVertexColor("blue");
	gv->defineEdgeCurved(false);

	// Get network of nodes
	vector<Vertex<int>*> routes = routesGraph.getVertexSet();

	// Creating the nodes
	for (unsigned int i = 0; i < routes.size(); i++){
		gv->addNode(routes[i]->getInfo());
		gv->setVertexSize(routes[i]->getInfo(), 5);
		routes[i]->gvNodeID = routes[i]->getInfo();
	}

	// Creating the edges
	unsigned int counter = 0;
	for (unsigned int i = 0; i < routes.size(); i++){
		for (int unsigned j = 0; j < routes[i]->adj.size(); j++){
			gv->addEdge(counter++, routes[i]->gvNodeID,
					routes[i]->adj[j].getDest()->gvNodeID,
					EdgeType::DIRECTED);

			routes[i]->adj[j].setGvEdgeID(counter);
			gv->setEdgeWeight(counter-1, routes[i]->adj[j].getWeigth());
		}
	}

	/*unsigned int i  = destNode;
	while (routes[i]->path != NULL){
		for (int unsigned j = 0; j < routes[i]->path->adj.size(); j++){
			if (routes[i]->path->adj[j].getDest()->getInfo() == routes[i]->getInfo()){
				gv->removeEdge(routes[i]->path->adj[j].getGvEdgeID());
				gv->addEdge(routes[i]->path->adj[j].getGvEdgeID(), routes[i]->path->gvNodeID,
						routes[i]->path->adj[j].getDest()->gvNodeID,
						EdgeType::DIRECTED);
				gv->setEdgeColor(routes[i]->path->adj[j].getGvEdgeID(), "GREEN");
				gv->setEdgeThickness(routes[i]->path->adj[j].getGvEdgeID(), 3);
				i = routes[i]->path->getInfo();
				break;
			}
		}
	}*/

	gv->rearrange();
}

void SchoolBus::showGraph1(){
	unsigned int width = 800;
	unsigned int height = 600;

	gv = new GraphViewer(width, height, true);
	gv->createWindow(width, height);
	gv->defineVertexColor("blue");
	gv->defineEdgeCurved(false);

	// Get network of nodes
	vector<Vertex<int>*> routes = routesGraph.getVertexSet();

	// Creating the nodes
	for (unsigned int i = 0; i < routes.size(); i++){
		gv->addNode(routes[i]->getInfo());
		gv->setVertexSize(routes[i]->getInfo(), 5);
		routes[i]->gvNodeID = routes[i]->getInfo();
	}

	// Creating the edges
	/*unsigned int counter = 0;
	for (unsigned int i = 0; i < routes.size(); i++){
		for (int unsigned j = 0; j < routes[i]->adj.size(); j++){
			gv->addEdge(counter++, routes[i]->gvNodeID,
					routes[i]->adj[j].getDest()->gvNodeID,
					EdgeType::DIRECTED);

			routes[i]->adj[j].setGvEdgeID(counter);
			gv->setEdgeWeight(counter-1, routes[i]->adj[j].getWeigth());
		}
	}*/

	gv->rearrange();
}

vector<Vertex<int>*>  SchoolBus::getInttoVertex(vector <int> &vec){
	vector<Vertex<int>*> temp;
	vector<Vertex<int>*> routes = this->routesGraph.getVertexSet();

	for (unsigned int i = 0; i < vec.size(); i++){
		for (unsigned int j = 0; j < routes.size(); j++){
			if (routes[j]->getInfo() == vec[i]){
				temp.push_back(routes[j]);
				break;
			}
		}
	}

	return temp;
}

void SchoolBus::generateRoute(int srcNode, int destNod, vector<int> stops){

	Graph<int> subGraph = routesGraph.createSubGraph(routesGraph,srcNode,destNod,stops);

	vector <int> subRoutes = subGraph.getShortestPathAllPoints(srcNode,destNod,stops,routesGraph.getW());
	vector <int> finalPath;

	for (unsigned int i = 0; i < subRoutes.size()-1; i++){
		vector <int> temp = this->routesGraph.getfloydWarshallPath(subRoutes[i], subRoutes[i+1]);
		finalPath.insert(finalPath.end(), temp.begin(), temp.end());
	}

	for (unsigned int i = 0; i < finalPath.size(); i++){
		cout << finalPath[i] << "   ";
	}

	vector<Vertex<int>*> path = getInttoVertex(finalPath);

	unsigned int width = 800;
	unsigned int height = 600;

	routesGraph.dijkstraShortestPath(srcNode);
	gv = new GraphViewer(width, height, true);
	gv->createWindow(width, height);
	gv->defineVertexColor("blue");
	gv->defineEdgeCurved(false);

	// Get network of nodes
	vector<Vertex<int>*> routes = routesGraph.getVertexSet();

	// Creating the nodes
	for (unsigned int i = 0; i < routes.size(); i++){
		gv->addNode(routes[i]->getInfo());
		gv->setVertexSize(routes[i]->getInfo(), 5);
		routes[i]->gvNodeID = routes[i]->getInfo();
	}

	// Creating the edges
	/*unsigned int counter = 0;
	for (unsigned int i = 0; i < routes.size(); i++){
		for (int unsigned j = 0; j < routes[i]->adj.size(); j++){
			gv->addEdge(counter++, routes[i]->gvNodeID,
					routes[i]->adj[j].getDest()->gvNodeID,
					EdgeType::DIRECTED);

			routes[i]->adj[j].setGvEdgeID(counter);
			gv->setEdgeWeight(counter-1, routes[i]->adj[j].getWeigth());
		}
	}*/

	unsigned int j = 0;
	for (unsigned int i = 0; i < path.size()-1; i++){
		if (path[i]->getInfo()!= path[i+1]->getInfo()){
			gv->addEdge(j, path[i]->gvNodeID, path[i+1]->gvNodeID, EdgeType::DIRECTED);
			gv->setEdgeColor(j, "GREEN");
			gv->setEdgeThickness(j, 3);
			j++;
		}
	}
}

void SchoolBus::saveBus(){
	ofstream file;

	remove("bus.csv");
	file.open("bus.csv");

	for (unsigned int i = 0; i < bus.size(); i++){
		if (i < bus.size() - 1)
			file << bus[i].getID() << ";" << bus[i].getRegistration() << ";" << bus[i].getBuildYear()<<";"<< bus[i].getCapacity() << ";" << bus[i].getSchool()->getID() <<"\n";
		else
			file << bus[i].getID() << ";" << bus[i].getRegistration() << ";" << bus[i].getBuildYear()<<";"<< bus[i].getCapacity() << ";" << bus[i].getSchool()->getID();
	}

	file.close();
}

void SchoolBus::saveSchools(){
	ofstream file;

	remove("schools.csv");
	file.open("schools.csv");

	for (unsigned int i = 0; i < schools.size(); i++){
		if (i < schools.size() - 1)
			file << schools[i]->getID() << ";" << schools[i]->getName() << ";" << schools[i]->getNodeID() << "\n";
		else
			file << schools[i]->getID() << ";" << schools[i]->getName() << ";" << schools[i]->getNodeID();
	}

	file.close();
}

void SchoolBus::saveStudents(){

	ofstream file;

	remove("students.csv");
	file.open("students.csv");

	for (unsigned int i = 0; i < schools.size(); i++){
		for (unsigned j = 0; j < schools[i]->getStudents().size(); j++){
			if ((i < schools.size() - 1) && (j < schools[i]->getStudents().size()-1))
				file << schools[i]->getStudents()[j]->getID() << ";" << schools[i]->getStudents()[j]->getName() << ";" << schools[i]->getStudents()[j]->getNodeID() << ";" << schools[i]->getStudents()[j]->getSchoolID()<< ";" << schools[i]->getStudents()[j]->getBusID() << "\n";
			else
				file << schools[i]->getStudents()[j]->getID() << ";" << schools[i]->getStudents()[j]->getName() << ";" << schools[i]->getStudents()[j]->getNodeID() << ";" << schools[i]->getStudents()[j]->getSchoolID()<< ";" << schools[i]->getStudents()[j]->getBusID() << "\n";
		}
	}

	file.close();
}

void SchoolBus::saveData(){
	saveSchools();
	saveBus();
	saveStudents();
};

void SchoolBus::loadBus(){
	ifstream file;
	string line;
	string buffer;
	string registration;
	int ID;
	int buildYear;
	int capacity;
	int schoolID;

	file.open("bus.csv");

	while(getline(file, line)){
		istringstream ss(line);

		while(ss.good()){
			getline(ss, buffer, ';');
			ID = atoi(buffer.c_str()); // ID
			getline(ss, registration, ';'); // Registration
			getline(ss, buffer, ';');
			buildYear = atoi(buffer.c_str()); // Build year
			getline(ss, buffer, ';');
			capacity = atoi(buffer.c_str()); // Build year
			getline(ss, buffer, ';');
			schoolID = atoi(buffer.c_str()); // School ID
		}

		Bus busTemp(buildYear, registration, capacity);
		busTemp.setID(ID);

		for (unsigned int i = 0; i < schools.size(); i++){
			if (schools[i]->getID() == schoolID){
				busTemp.setSchool(schools[i]);
				break;
			}
		}

		bus.push_back(busTemp);
	}

	file.close();
}

void SchoolBus::loadSchools(){
	ifstream file;
	string line;
	string buffer;
	string name;
	int ID;
	int nodeID;

	file.open("schools.csv");

	while(getline(file, line)){
		istringstream ss(line);

		while(ss.good()){
			getline(ss, buffer, ';');
			ID = atoi(buffer.c_str()); // ID
			getline(ss, name, ';'); // Name
			getline(ss, buffer, ';');
			nodeID = atoi(buffer.c_str()); // Node ID
		}

		School * school = new School(name, nodeID);
		school->setID(ID);
		schools.push_back(school);
	}

	file.close();
}

void SchoolBus::loadStudents(){
	ifstream file;
	string line;
	string buffer;
	string name;
	int ID;
	int nodeID;
	int schoolID;
	int busID;

	file.open("students.csv");

	while(getline(file, line)){
		istringstream ss(line);

		while(ss.good()){
			getline(ss, buffer, ';');
			ID = atoi(buffer.c_str()); // ID
			getline(ss, name, ';'); // Name
			getline(ss, buffer, ';');
			nodeID = atoi(buffer.c_str()); // Node ID
			getline(ss, buffer, ';');
			schoolID = atoi(buffer.c_str()); // schoolID
			getline(ss, buffer, ';');
			busID = atoi(buffer.c_str()); // Build year
		}

		Student * student = new Student(name, nodeID);
		student->setID(ID);
		student->setNodeID(nodeID);
		student->setSchoolID(schoolID);
		student->setBusID(busID);

		for (unsigned int i = 0; i < schools.size(); i++){
			if (schools[i]->getID() == schoolID){
				schools[i]->addStudent(student);
				break;
			}
		}

		for (unsigned int i = 0; i < bus.size(); i++){
			if (bus[i].getID() == busID){
				bus[i].addStudent(student);
				break;
			}
		}


	}

	file.close();
}

void SchoolBus::loadData(){
	loadSchools();
	loadBus();
	loadStudents();
};

void SchoolBus::menuShowBus(){
	clrscr();
	printAppName();
	cout << endl << endl;

	for (unsigned int i = 0; i < bus.size(); i++){
		cout << bus[i];
	}

	cout << endl;
}

void SchoolBus::menuShowSchools(){
	clrscr();
	printAppName();

	cout << schools[0]->getName() << endl;

	for (unsigned int i = 0; i < schools.size(); i++){
		cout << schools[i];
	}

	cout << endl;
}

void SchoolBus::menuShowStudents(){
	clrscr();
	printAppName();
	cout << endl << endl;

	for (unsigned int i = 0; i < schools.size(); i++){
		for (unsigned int j = 0; j < bus[i].getStudents().size(); j++){
			cout << "Student ID: " << bus[i].getStudents()[j]->getID() << " | " << "Student Name: " << bus[i].getStudents()[j]->getName() << " | " << "Node ID: " << bus[i].getStudents()[j]->getNodeID() << " | " << "School ID: " << bus[i].getStudents()[j]->getSchoolID() << " | " << "Bus ID: " << bus[i].getStudents()[j]->getBusID() << "\n";
		};
	}

	cout << endl;
}

void SchoolBus::menuStarting(){
	string Menu[5] = { "<<  SCHOOL MANAGEMENT >>", "<<  CLIENT MANAGEMENT >>", "<<  BUS MANAGEMENT    >>", "<<  VIEW OF CITY MAP  >>", "<<  EXIT              >>" };
	bool validity = true;
	int pointer = 0;

	while (validity)
	{
		clrscr();
		printAppName();
		setColor(11, 0);
		cout << setw(51) << "<<<<<   WELCOME    >>>>>" << endl << endl;

		for (int i = 0; i < 5; ++i)
		{
			if (i == pointer)
			{
				cout << "                           ";
				setColor(3, 1);
				cout << Menu[i] << endl << endl;
			}
			else
			{
				setColor(3, 0);
				cout << setw(51) << Menu[i] << endl << endl;
			}
		}
		setColor(7, 0);

		while (validity)
		{
			int ch = _getch();

			if (ch == 0 || ch == 224)
				ch = 256 + _getch();

			if (ch == ARROW_DOWN) {
				Beep(250, 160);
				pointer += 1;
				if (pointer == 5)
				{
					pointer = 0;
				}
				break;
			}

			if (ch == ARROW_UP){
				Beep(250, 160);
				pointer -= 1;
				if (pointer == -1)
				{
					pointer = 4;
				}
				break;
			}

			if (ch == '\r')
			{
				setColor(7, 0);
				Beep(200, 160);

				switch (pointer)
				{
				case 0:
					validity = false;
					menuSchoolManagement();
					break;
				case 1:
					validity = false;
					menuClientManagement();
					break;
				case 2:
					validity = false;
					menuBusManagement();
					break;
				case 3:
					// TODO - APAGAR/MODIFICAR
					//showGraph(0, 17);
					showgraph();
					break;
				case 4:
					saveData();
					exiting();
				}
			}
		}
	}
}

void SchoolBus::searchSchoolID(int schoolID){
	bool found = false;

	for (unsigned int i = 0; i < schools.size(); i++){
		if (schools[i]->getID()==schoolID){
			found = true;
			break;
		}
	}

	if (found){
		clrscr();
		printAppName();
		cleanBuffer();
		char input = ' ';
		cout << "> Do you want to see the BUS Route?";
		cin >> input;
		if (input == 'y' || input == 'Y'){
			cout << "\n> Please wait a moment while the map loads.\n";
			showGraph(this->nodeID, 6); // TODO - IMPRIMIR ROTA - alterar para valores corretos (valor 6 aqui colocado é random - deve ser mudado apra o nodeID da escola)
		}

		pressKeyToContinue();
		menuSearchSchool();
	}

	else {
		setColor(4, 0);
		cout << ":: ERROR: There is no School with the ID " << schoolID << " registered in the database! Please try again."<< endl << endl;
		setColor(7, 0);
		Sleep(1000);
		menuSearchSchool();
	}
}

void SchoolBus::searchSchoolName(string schoolName){
	bool found = false;

	for (unsigned int i = 0; i < schools.size(); i++){
		if (schools[i]->getName()==schoolName){
			found = true;
			break;
		}
	}

	if (found){
		clrscr();
		printAppName();
		cleanBuffer();
		char input = ' ';
		cout << "> Do you want to see the BUS Route?";
		cin >> input;
		if (input == 'y' || input == 'Y'){
			cout << "\n> Please wait a moment while the map loads.\n";
			showGraph(this->nodeID, 6); // TODO - IMPRIMIR ROTA - alterar para valores corretos (valor 6 aqui colocado é random - deve ser mudado apra o nodeID da escola)
		}
		pressKeyToContinue();
		menuSearchBus();
	}

	else {
		setColor(4, 0);
		cout << ":: ERROR: There is no School with the name " << schoolName << " registered in the database! Please try again."<< endl << endl;
		setColor(7, 0);
		Sleep(1000);
		menuSearchBus();
	}
}

void SchoolBus::menuSearchSchool(){
	string Menu[4] = { "<<  SEARCH BY ID      >>", "<<  SEARCH BY NAME  >>", "<<  BACK              >>", "<<  EXIT              >>" };
	bool validity = true;
	int pointer = 0;
	int id;
	string name;

	while (validity)
	{
		clrscr();
		printAppName();
		setColor(11, 0);
		cout << setw(51) << "<<<<<  SEARCH BUS  >>>>>" << endl << endl;

		for (int i = 0; i < 4; ++i)
		{
			if (i == pointer)
			{
				cout << "                           ";
				setColor(3, 1);
				cout << Menu[i] << endl << endl;
			}
			else
			{
				setColor(3, 0);
				cout << setw(51) << Menu[i] << endl << endl;
			}
		}
		setColor(7, 0);

		while (validity)
		{
			int ch = _getch();

			if (ch == 0 || ch == 224)
				ch = 256 + _getch();

			if (ch == ARROW_DOWN) {
				Beep(250, 160);
				pointer += 1;
				if (pointer == 4)
				{
					pointer = 0;
				}
				break;
			}

			if (ch == ARROW_UP){
				Beep(250, 160);
				pointer -= 1;
				if (pointer == -1)
				{
					pointer = 3;
				}
				break;
			}

			if (ch == '\r')
			{
				setColor(7, 0);
				Beep(200, 160);

				switch (pointer)
				{
				case 0:
					validity = false;
					clrscr();
					printAppName();
					cleanBuffer();
					cout << ">> SCHOOL ID: ";
					cin >> id;
					if (cin.fail()){
						setColor(4, 0);
						cout << ":: ERROR: Invalid input! Please try again." << endl << endl;
						setColor(7, 0);
						Sleep(1000);
					}
					else
						searchSchoolID(id);
					pressKeyToContinue();
					cleanBuffer();
					menuSearchBus();
				case 1:
					validity = false;
					clrscr();
					printAppName();
					cleanBuffer();
					cout << ">> BUS REGISTRATION: ";
					getline(cin, name);
					searchSchoolName(name);
					pressKeyToContinue();
					cleanBuffer();
					menuSearchSchool();
					break;
				case 2:
					validity = false;
					menuSchoolManagement();
					break;
				case 3:
					saveData();
					exiting();
				}
			}
		}
	}
}

bool SchoolBus::validSchoolName(const string &name){

	for (unsigned int i = 0; i < schools.size(); i++){
		if (schools[i]->getName() == name)
			return false;
	}

	return true;
}

string SchoolBus::registerSchoolName(){
	string name;
	clrscr();
	printAppName();

	cout << ">> SCHOOL NAME: ";
	getline(cin, name);

	while(cin.fail() || !validSchoolName(name)){
		cleanBuffer();
		setColor(4, 0);
		cout << ":: ERROR: Invalid school name! Please try again." << endl << endl;
		Sleep(1000);
		setColor(7, 0);
		clrscr();
		printAppName();
		cout << ">> SCHOOL NAME: ";
		getline(cin, name);
	}

	cleanBuffer();

	return name;
}

bool SchoolBus::validNodeID(int nodeID){

	// Can't there is repeated node ID

	if (this->nodeID == nodeID)
		return false;

	for (unsigned int i = 0; i < schools.size(); i++){
		if (schools[i]->getNodeID()==nodeID)
			return false;
	}

	for (unsigned int i = 0; i < bus.size(); i++){
		for (unsigned j = 0; j < bus[i].getStudents().size(); j++){
			if (bus[i].getStudents()[j]->getNodeID() == nodeID)
				return false;
		}
	}

	for (unsigned int i = 0; i < routesGraph.getVertexSet().size(); i++){
		if (routesGraph.getVertexSet()[i]->getInfo() == nodeID)
			return true;
	}

	return false;
}

int SchoolBus::registerSchoolNodeID(){

	int nodeID;

	clrscr();
	printAppName();

	cout << ">> SCHOOL NODE ID (localization in the graph): ";
	cin >> nodeID;

	while(cin.fail() || !validNodeID(nodeID)){
		cleanBuffer();
		setColor(4, 0);
		cout << ":: ERROR: Invalid school localization! Please try again." << endl << endl;
		Sleep(1000);
		setColor(7, 0);
		clrscr();
		printAppName();
		cout << ">> SCHOOL NODE ID (localization in the graph): ";
		cin >> nodeID;
	}

	cleanBuffer();

	return nodeID;
}

void SchoolBus::registerNewSchool(){

	string name = registerSchoolName();
	int schoolNodeID = registerSchoolNodeID();

	School * schoolTemp = new School(name, schoolNodeID);
	this->schools.push_back(schoolTemp);

	setColor(10, 0);
	cout << ":: INFO: A new school was registered with success!" << endl << endl;
	setColor(7, 0);

	Sleep(2000);

	menuSchoolManagement();
}

void SchoolBus::menuSchoolManagement(){
	string Menu[5] = { "<<  SEE SCHOOLS       >>", "<<  SEARCH SCHOOL     >>", "<<  CREATE SCHOOL     >>","<<  BACK              >>", "<<  EXIT              >>" };
	bool validity = true;
	int pointer = 0;

	while (validity)
	{
		clrscr();
		printAppName();
		setColor(11, 0);
		cout << setw(51) << "<<<<<    SCHOOLS   >>>>>" << endl << endl;

		for (int i = 0; i < 5; ++i)
		{
			if (i == pointer)
			{
				cout << "                           ";
				setColor(3, 1);
				cout << Menu[i] << endl << endl;
			}
			else
			{
				setColor(3, 0);
				cout << setw(51) << Menu[i] << endl << endl;
			}
		}
		setColor(7, 0);

		while (validity)
		{
			int ch = _getch();

			if (ch == 0 || ch == 224)
				ch = 256 + _getch();

			if (ch == ARROW_DOWN) {
				Beep(250, 160);
				pointer += 1;
				if (pointer == 5)
				{
					pointer = 0;
				}
				break;
			}

			if (ch == ARROW_UP){
				Beep(250, 160);
				pointer -= 1;
				if (pointer == -1)
				{
					pointer = 4;
				}
				break;
			}

			if (ch == '\r')
			{
				setColor(7, 0);
				Beep(200, 160);

				switch (pointer)
				{
				case 0:
					validity = false;
					menuShowSchools();
					pressKeyToContinue();
					menuSchoolManagement();
					break;
				case 1:
					validity = false;
					menuSearchSchool();
					break;
				case 2:
					validity = false;
					registerNewSchool();
					break;
				case 3:
					validity = false;
					menuStarting();
					break;
				case 4:
					saveData();
					exiting();
				}
			}
		}
	}
}

void SchoolBus::menuClientManagement(){
	string Menu[5] = { "<<  SEE CLIENTS       >>", "<<  SEARCH CLIENT     >>","<<  CREATE CLIENT     >>", "<<  BACK              >>", "<<  EXIT              >>" };
	bool validity = true;
	int pointer = 0;

	while (validity)
	{
		clrscr();
		printAppName();
		setColor(11, 0);
		cout << setw(51) << "<<<<<    CLIENT    >>>>>" << endl << endl;

		for (int i = 0; i < 5; ++i)
		{
			if (i == pointer)
			{
				cout << "                           ";
				setColor(3, 1);
				cout << Menu[i] << endl << endl;
			}
			else
			{
				setColor(3, 0);
				cout << setw(51) << Menu[i] << endl << endl;
			}
		}
		setColor(7, 0);

		while (validity)
		{
			int ch = _getch();

			if (ch == 0 || ch == 224)
				ch = 256 + _getch();

			if (ch == ARROW_DOWN) {
				Beep(250, 160);
				pointer += 1;
				if (pointer == 5)
				{
					pointer = 0;
				}
				break;
			}

			if (ch == ARROW_UP){
				Beep(250, 160);
				pointer -= 1;
				if (pointer == -1)
				{
					pointer = 4;
				}
				break;
			}

			if (ch == '\r')
			{
				setColor(7, 0);
				Beep(200, 160);

				switch (pointer)
				{
				case 0:
					validity = false;
					menuShowStudents();
					pressKeyToContinue();
					menuClientManagement();
					break;
				case 1:
					validity = false;
					exit(0);
					break;
				case 2:
					saveData();
					registerNewClient();
					break;
				case 3:
					validity = false;
					menuStarting();
					break;
				case 4:
					saveData();
					exiting();
				}
			}
		}
	}
}

void SchoolBus::searchBusID(int busID){
	bool found = false;

	for (unsigned int i = 0; i < bus.size(); i++){
		if (bus[i].getID()==busID){
			found = true;
			break;
		}
	}

	if (found){
		clrscr();
		printAppName();
		cleanBuffer();
		char input = ' ';
		cout << "> Do you want to see the BUS Route?";
		cin >> input;
		if (input == 'y' || input == 'Y'){
			cout << "\n> Please wait a moment while the map loads.\n";
			showGraph(this->nodeID, 6); // TODO - IMPRIMIR ROTA - alterar para valores corretos (valor 6 aqui colocado é random - deve ser mudado apra o nodeID da escola)
		}

		pressKeyToContinue();
		menuSearchBus();
	}

	else {
		setColor(4, 0);
		cout << ":: ERROR: There is no BUS with the ID " << busID << " registered in the database! Please try again."<< endl << endl;
		setColor(7, 0);
		Sleep(1000);
		menuSearchBus();
	}
}

void SchoolBus::searchBusReg(string busReg){
	bool found = false;

	for (unsigned int i = 0; i < bus.size(); i++){
		if (bus[i].getRegistration()==busReg){
			found = true;
			break;
		}
	}

	if (found){
		clrscr();
		printAppName();
		cleanBuffer();
		char input = ' ';
		cout << "> Do you want to see the BUS Route?";
		cin >> input;
		if (input == 'y' || input == 'Y'){
			cout << "\n> Please wait a moment while the map loads.\n";
			showGraph(this->nodeID, 6); // TODO - IMPRIMIR ROTA - alterar para valores corretos (valor 6 aqui colocado é random - deve ser mudado apra o nodeID da escola)
		}

		pressKeyToContinue();
		menuSearchSchool();
	}

	else {
		setColor(4, 0);
		cout << ":: ERROR: There is no BUS with the Registration " << busReg << " registered in the database! Please try again."<< endl << endl;
		setColor(7, 0);
		Sleep(1000);
		menuSearchSchool();
	}
}

void SchoolBus::menuSearchBus(){
	string Menu[4] = { "<<  SEARCH BY ID      >>", "<<  SEARCH BY REGIST  >>", "<<  BACK              >>", "<<  EXIT              >>" };
	bool validity = true;
	int pointer = 0;
	int id;
	string reg;

	while (validity)
	{
		clrscr();
		printAppName();
		setColor(11, 0);
		cout << setw(51) << "<<<<<  SEARCH BUS  >>>>>" << endl << endl;

		for (int i = 0; i < 4; ++i)
		{
			if (i == pointer)
			{
				cout << "                           ";
				setColor(3, 1);
				cout << Menu[i] << endl << endl;
			}
			else
			{
				setColor(3, 0);
				cout << setw(51) << Menu[i] << endl << endl;
			}
		}
		setColor(7, 0);

		while (validity)
		{
			int ch = _getch();

			if (ch == 0 || ch == 224)
				ch = 256 + _getch();

			if (ch == ARROW_DOWN) {
				Beep(250, 160);
				pointer += 1;
				if (pointer == 4)
				{
					pointer = 0;
				}
				break;
			}

			if (ch == ARROW_UP){
				Beep(250, 160);
				pointer -= 1;
				if (pointer == -1)
				{
					pointer = 3;
				}
				break;
			}

			if (ch == '\r')
			{
				setColor(7, 0);
				Beep(200, 160);

				switch (pointer)
				{
				case 0:
					validity = false;
					clrscr();
					printAppName();
					cleanBuffer();
					cout << ">> BUS ID: ";
					cin >> id;
					if (cin.fail()){
						setColor(4, 0);
						cout << ":: ERROR: Invalid input! Please try again." << endl << endl;
						setColor(7, 0);
						Sleep(1000);
					}
					else
						searchBusID(id);
					pressKeyToContinue();
					cleanBuffer();
					menuSearchBus();
				case 1:
					validity = false;
					clrscr();
					printAppName();
					cleanBuffer();
					cout << ">> BUS REGISTRATION: ";
					getline(cin, reg);
					searchBusReg(reg);
					pressKeyToContinue();
					cleanBuffer();
					menuSearchBus();
					break;
				case 2:
					validity = false;
					menuBusManagement();
					break;
				case 3:
					saveData();
					exiting();
				}
			}
		}
	}
}

int SchoolBus::registerBusYear(){
	int busYear;
	time_t t = time(0);   // get time now
	struct tm * now = localtime( & t );
	int currentYear = now->tm_year + 1900;

	clrscr();
	printAppName();

	cout << ">> CONSTRUCTION BUS YEAR: ";
	cin >> busYear;

	while(cin.fail() || busYear < 1900 || busYear > currentYear){
		cleanBuffer();
		setColor(4, 0);
		cout << ":: ERROR: Invalid construction year! Please try again." << endl << endl;
		Sleep(1000);
		setColor(7, 0);
		clrscr();
		printAppName();
		cout << ">> CONSTRUCTION BUS YEAR: ";
		cin >> busYear;
	}

	cleanBuffer();

	return busYear;
}

bool SchoolBus::validRegistration(const string &reg){

	if (reg.size() != 6)
		return false;

	for (unsigned int i = 0; i < bus.size(); i++)
		if (bus[i].getRegistration() == reg)
			return false;


	if (reg[0] >= '0' && reg[1] >= '0' && reg[4] >= '0' && reg[5] >= '0'){
		if (reg[0] <= '9' && reg[1] <= '9' && reg[4] <= '9' && reg[5] <= '9')
			if (reg[2] >= 'A' && reg[3] >= 'A')
				if (reg[2] <= 'Z' && reg[3] <= 'Z')
					return true;
	}

	return false;
}

string SchoolBus::registerBusRegistration(){
	string busReg;
	clrscr();
	printAppName();

	cout << ">> BUS REGISTRATION (09AZ09): ";
	getline(cin, busReg);

	while(cin.fail() || !validRegistration(busReg)){
		cleanBuffer();
		setColor(4, 0);
		cout << ":: ERROR: Invalid registration! Please try again." << endl << endl;
		Sleep(1000);
		setColor(7, 0);
		clrscr();
		printAppName();
		cout << ">> BUS REGISTRATION (09AZ09): ";
		getline(cin, busReg);
	}

	cleanBuffer();

	return busReg;
}

int SchoolBus::registerBusCapacity(){
	int capacity;

	clrscr();
	printAppName();

	cout << ">> BUS CAPACITY (min: 10 | max: 20): ";
	cin >> capacity;

	while(cin.fail() || capacity < 10 || capacity > 20){
		cleanBuffer();
		setColor(4, 0);
		cout << ":: ERROR: Invalid bus capacity! Please try again." << endl << endl;
		Sleep(1000);
		setColor(7, 0);
		clrscr();
		printAppName();
		cout << ">> BUS CAPACITY (min: 10 | max: 20): ";
		cin >> capacity;
	}

	cleanBuffer();

	return capacity;
}

bool SchoolBus::validBusSchoolID(int id){
	for (unsigned int i = 0; i < schools.size(); i++){
		if (schools[i]->getID() == id){
			return true;
		}
	}

	return false;
}

int SchoolBus::registerBusSchool(){
	int ID;

	clrscr();
	printAppName();

	cout << ">> SCHOOL ID: ";
	cin >> ID;

	while(cin.fail() || !validBusSchoolID(ID)){
		cleanBuffer();
		setColor(4, 0);
		cout << ":: ERROR: Invalid school ID! Please try again." << endl << endl;
		Sleep(1000);
		setColor(7, 0);
		clrscr();
		printAppName();
		cout << ">> SCHOOL ID: ";
		cin >> ID;
	}

	cleanBuffer();

	return ID;
}

void SchoolBus::registerNewBus(){

	if (schools.size() == 0){
		setColor(4, 0);
		cout << ":: ERROR: Can´t create bus because currently there is no any school in database." << endl << endl;
		Sleep(2000);
		setColor(7, 0);
		menuBusManagement();
	}

	else {
		int year = registerBusYear();
		string registration = registerBusRegistration();
		int capacity = registerBusCapacity();
		int schoolID = registerBusSchool();

		Bus busTemp(year, registration, capacity);

		for (unsigned int i = 0; i < schools.size(); i++){
			if (schools[i]->getID() == schoolID){
				busTemp.setSchool(schools[i]);
				break;
			}
		}

		bus.push_back(busTemp);

		setColor(10, 0);
		cout << ":: INFO: A new bus was registered with success!" << endl << endl;
		setColor(7, 0);

		Sleep(2000);

		menuBusManagement();
	}

}

string SchoolBus::registerStudentName(){
	string stuName;
	clrscr();
	printAppName();

	cout << ">> STUDENT NAME: ";
	getline(cin, stuName);

	while(cin.fail()){
		cleanBuffer();
		setColor(4, 0);
		cout << ":: ERROR: Invalid name! Please try again." << endl << endl;
		Sleep(1000);
		setColor(7, 0);
		clrscr();
		printAppName();
		cout << ">> STUDENT NAME: ";
		getline(cin, stuName);
	}

	cleanBuffer();

	return stuName;
}

int SchoolBus::registerStudentSchool(){
	int stuSchool = 0;
	clrscr();
	printAppName();

	cout << ">> SCHOOL ID: ";
	cin >> stuSchool;

	while(cin.fail() || !validBusSchoolID(stuSchool)){
		cleanBuffer();
		setColor(4, 0);
		cout << ":: ERROR: Invalid school ID! Please try again." << endl << endl;
		Sleep(1000);
		setColor(7, 0);
		clrscr();
		printAppName();
		cout << ">> SCHOOL ID: ";
		cin >> stuSchool;
	}

	cleanBuffer();

	return stuSchool;
}

int SchoolBus::resgisterStudentBus(int schoolID){
	int stuBus = 0;

	for(unsigned int i = 0;i < bus.size();i++){
		if((bus[i].getSchool()->getID() == schoolID) && ((bus[i].getCapacity() - 1) > bus[i].getStudents().size())){
			stuBus = bus[i].getID();
			break;

		}
	}

	return stuBus;
}

int SchoolBus::registerStudentNode(){
	int nodeID;

	clrscr();
	printAppName();

	cout << ">> STUDENT NODE ID (localization in the graph): ";
	cin >> nodeID;

	while(cin.fail()){
		cleanBuffer();
		setColor(4, 0);
		cout << ":: ERROR: Invalid student localization! Please try again." << endl << endl;
		Sleep(1000);
		setColor(7, 0);
		clrscr();
		printAppName();
		cout << ">> STUDENT NODE ID (localization in the graph): ";
		cin >> nodeID;
	}

	cleanBuffer();

	return nodeID;
}

void SchoolBus::registerNewClient(){

	if (bus.size() == 0){
		setColor(4, 0);
		cout << ":: ERROR: Can´t register client because currently there is any bus in database." << endl << endl;
		Sleep(2000);
		setColor(7, 0);
		menuClientManagement();
	}

	else {
		string name = registerStudentName();
		int schoolID = registerStudentSchool();
		int busID = resgisterStudentBus(schoolID);
		int nodeID = registerStudentNode();

		Student tempStudent(name, nodeID);
		tempStudent.setBusID(busID);
		tempStudent.setSchoolID(schoolID);

		Student* ptTempStudent = &tempStudent;

		for (unsigned int i = 0; i < schools.size(); i++){
			if (schools[i]->getID() == schoolID){
				schools[i]->addStudent(ptTempStudent);
				break;
			}
		}

		for (unsigned int i = 0; i < bus.size(); i++){
			if (bus[i].getID() == busID){
				bus[i].addStudent(ptTempStudent);
				break;
			}
		}

		setColor(10, 0);
		cout << ":: INFO: A new client was registered with success!" << endl << endl;
		setColor(7, 0);

		Sleep(2000);

		menuClientManagement();
	}

}

void SchoolBus::menuBusManagement(){
	string Menu[5] = { "<<  SEE ALL BUS       >>", "<<  SEARCH BUS        >>", "<<  REGISTER NEW BUS  >>", "<<  BACK              >>", "<<  EXIT              >>" };
	bool validity = true;
	int pointer = 0;

	while (validity)
	{
		clrscr();
		printAppName();
		setColor(11, 0);
		cout << setw(51) << "<<<<<     BUS      >>>>>" << endl << endl;

		for (int i = 0; i < 5; ++i)
		{
			if (i == pointer)
			{
				cout << "                           ";
				setColor(3, 1);
				cout << Menu[i] << endl << endl;
			}
			else
			{
				setColor(3, 0);
				cout << setw(51) << Menu[i] << endl << endl;
			}
		}
		setColor(7, 0);

		while (validity)
		{
			int ch = _getch();

			if (ch == 0 || ch == 224)
				ch = 256 + _getch();

			if (ch == ARROW_DOWN) {
				Beep(250, 160);
				pointer += 1;
				if (pointer == 5)
				{
					pointer = 0;
				}
				break;
			}

			if (ch == ARROW_UP){
				Beep(250, 160);
				pointer -= 1;
				if (pointer == -1)
				{
					pointer = 4;
				}
				break;
			}

			if (ch == '\r')
			{
				setColor(7, 0);
				Beep(200, 160);

				switch (pointer)
				{
				case 0:
					validity = false;
					menuShowBus();
					pressKeyToContinue();
					menuBusManagement();
					break;
				case 1:
					validity = false;
					menuSearchBus();
					break;
				case 2:
					saveData();
					registerNewBus();
					break;
				case 3:
					validity = false;
					menuStarting();
					break;
				case 4:
					saveData();
					exiting();
				}
			}
		}
	}
}
