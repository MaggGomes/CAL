#include "SchoolBus.h"
#include "Graphviewer.h"
#include "GraphCreator.h"

using namespace std;

Graph<int> CreateTestGraph(){
	Graph<int> myGraph;

	for(int i = 0; i < 7; i++)
		myGraph.addVertex(i);

	myGraph.addEdge(0, 1, 2);
	myGraph.addEdge(0, 3, 7);
	myGraph.addEdge(1, 3, 3);
	myGraph.addEdge(1, 4, 5);
	myGraph.addEdge(2, 0, 2);
	myGraph.addEdge(2, 5, 5);
	myGraph.addEdge(3, 2, 1);
	myGraph.addEdge(3, 4, 1);
	myGraph.addEdge(3, 5, 6);
	myGraph.addEdge(3, 6, 4);
	myGraph.addEdge(4, 6, 2);
	myGraph.addEdge(5, 4, 2);
	myGraph.addEdge(5, 3, 3);
	myGraph.addEdge(6, 5, 4);

	return myGraph;
}

int main(){
	/*GraphViewer *gv = new GraphViewer(600, 600, false);
	gv->createWindow(600, 600);
	gv->addNode(0, 200, 200);
	gv->addNode(1, 20, 20);
	gv->rearrange();*/


	/*int tempID = 1;

	GraphViewer *gv = graphCreator(txtAReader(),txtBReader() ,txtCReader(tempID));
	gv->rearrange();
	getchar();

	SchoolBus schoolBus;
	schoolBus.menuStarting();*/


	// TODO - APAGAR -  código de teste

	SchoolBus schoolBus(CreateTestGraph());
	GraphViewer *gv = new GraphViewer(600, 600, true);
	gv->createWindow(800, 600);
	/*for(int i = 0; i < 7; i++)
		gv->addNode(i);

	gv->addEdge(0, 0, 1, EdgeType::UNDIRECTED);
	gv->addEdge(1, 0, 3, EdgeType::UNDIRECTED);
	gv->addEdge(2, 1, 3, EdgeType::UNDIRECTED);
	gv->addEdge(3, 1, 4, EdgeType::UNDIRECTED);
	gv->addEdge(4, 2, 0, EdgeType::UNDIRECTED);
	gv->addEdge(5, 2, 5, EdgeType::UNDIRECTED);
	gv->addEdge(6, 3, 2, EdgeType::UNDIRECTED);
	gv->addEdge(7, 3, 4, EdgeType::UNDIRECTED);
	gv->addEdge(8, 3, 5, EdgeType::UNDIRECTED);
	gv->addEdge(9, 3, 6, EdgeType::UNDIRECTED);
	gv->addEdge(10, 4, 6, EdgeType::UNDIRECTED);
	gv->addEdge(11, 5, 4, EdgeType::UNDIRECTED);
	gv->addEdge(12, 5, 3, EdgeType::UNDIRECTED);
	gv->addEdge(13, 6, 5, EdgeType::UNDIRECTED);
	gv->rearrange();
	schoolBus.menuStarting();*/

	schoolBus.getRoutesGraph().dijkstraShortestPath(0);


	vector<Vertex<int>* > vs = schoolBus.getRoutesGraph().getVertexSet();

	for (unsigned int i = 0; i < vs.size(); i++){
		gv->addNode(vs[i]->getInfo());
	}

	for (unsigned int i = 0; i < vs.size(); i++){
		gv->addNode(vs[i]->getInfo());
		//for (unsigned int j = 0; j < vs[i]->)
	}

	/*for(unsigned int i = 0; i < vs.size(); i++) {

		gv->addNode(vs[i]->getInfo());
		if ( vs[i]->path != NULL ){
			gv->addEdge(i, vs[i]->path->getInfo(), vs[i]->getInfo(), EdgeType::DIRECTED);
			gv->setEdgeThickness(i, 1);
		}
	}

	gv->rearrange();

	unsigned int i  = 6;
	while (vs[i]->path != NULL){
		gv->setEdgeColor(i, "GREEN");
		gv->setEdgeThickness(i, 3);
		i = vs[i]->path->getInfo();
	}


	gv->rearrange();
	schoolBus.menuStarting();*/

	return 0;
}
